// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/circusShow.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace grpcProtoFiles {
  public static partial class CircusShowService
  {
    static readonly string __ServiceName = "circusShow.CircusShowService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.CreateCircusShowRequest> __Marshaller_circusShow_CreateCircusShowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.CreateCircusShowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.CreateCircusShowResponse> __Marshaller_circusShow_CreateCircusShowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.CreateCircusShowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.CircusShowByIdRequest> __Marshaller_circusShow_CircusShowByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.CircusShowByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.CircusShowByIdResponse> __Marshaller_circusShow_CircusShowByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.CircusShowByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.getAllCircusShowsRequest> __Marshaller_circusShow_getAllCircusShowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.getAllCircusShowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.GetAllCircusShowResponse> __Marshaller_circusShow_GetAllCircusShowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.GetAllCircusShowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.getAllCircusShowsByLocationRequest> __Marshaller_circusShow_getAllCircusShowsByLocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.getAllCircusShowsByLocationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.getAllCircusShowsByLocationResponse> __Marshaller_circusShow_getAllCircusShowsByLocationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.getAllCircusShowsByLocationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.Integer> __Marshaller_circusShow_Integer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.Integer.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::grpcProtoFiles.DeleteCircusShowResponse> __Marshaller_circusShow_DeleteCircusShowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::grpcProtoFiles.DeleteCircusShowResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::grpcProtoFiles.CreateCircusShowRequest, global::grpcProtoFiles.CreateCircusShowResponse> __Method_createCircusShow = new grpc::Method<global::grpcProtoFiles.CreateCircusShowRequest, global::grpcProtoFiles.CreateCircusShowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createCircusShow",
        __Marshaller_circusShow_CreateCircusShowRequest,
        __Marshaller_circusShow_CreateCircusShowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::grpcProtoFiles.CircusShowByIdRequest, global::grpcProtoFiles.CircusShowByIdResponse> __Method_getCircusShowById = new grpc::Method<global::grpcProtoFiles.CircusShowByIdRequest, global::grpcProtoFiles.CircusShowByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getCircusShowById",
        __Marshaller_circusShow_CircusShowByIdRequest,
        __Marshaller_circusShow_CircusShowByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::grpcProtoFiles.getAllCircusShowsRequest, global::grpcProtoFiles.GetAllCircusShowResponse> __Method_getAllCircusShows = new grpc::Method<global::grpcProtoFiles.getAllCircusShowsRequest, global::grpcProtoFiles.GetAllCircusShowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getAllCircusShows",
        __Marshaller_circusShow_getAllCircusShowsRequest,
        __Marshaller_circusShow_GetAllCircusShowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::grpcProtoFiles.getAllCircusShowsByLocationRequest, global::grpcProtoFiles.getAllCircusShowsByLocationResponse> __Method_getAllCircusShowsByLocation = new grpc::Method<global::grpcProtoFiles.getAllCircusShowsByLocationRequest, global::grpcProtoFiles.getAllCircusShowsByLocationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getAllCircusShowsByLocation",
        __Marshaller_circusShow_getAllCircusShowsByLocationRequest,
        __Marshaller_circusShow_getAllCircusShowsByLocationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::grpcProtoFiles.Integer, global::grpcProtoFiles.DeleteCircusShowResponse> __Method_DeleteCircusShow = new grpc::Method<global::grpcProtoFiles.Integer, global::grpcProtoFiles.DeleteCircusShowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCircusShow",
        __Marshaller_circusShow_Integer,
        __Marshaller_circusShow_DeleteCircusShowResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::grpcProtoFiles.CircusShowReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CircusShowService</summary>
    [grpc::BindServiceMethod(typeof(CircusShowService), "BindService")]
    public abstract partial class CircusShowServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::grpcProtoFiles.CreateCircusShowResponse> createCircusShow(global::grpcProtoFiles.CreateCircusShowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::grpcProtoFiles.CircusShowByIdResponse> getCircusShowById(global::grpcProtoFiles.CircusShowByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::grpcProtoFiles.GetAllCircusShowResponse> getAllCircusShows(global::grpcProtoFiles.getAllCircusShowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::grpcProtoFiles.getAllCircusShowsByLocationResponse> getAllCircusShowsByLocation(global::grpcProtoFiles.getAllCircusShowsByLocationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///TODO
      ///rpc deleteCircusShow(CircusShowByIdRequest) returns (CreateCircusShowResponse);
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::grpcProtoFiles.DeleteCircusShowResponse> DeleteCircusShow(global::grpcProtoFiles.Integer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CircusShowService</summary>
    public partial class CircusShowServiceClient : grpc::ClientBase<CircusShowServiceClient>
    {
      /// <summary>Creates a new client for CircusShowService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CircusShowServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CircusShowService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CircusShowServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CircusShowServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CircusShowServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.CreateCircusShowResponse createCircusShow(global::grpcProtoFiles.CreateCircusShowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createCircusShow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.CreateCircusShowResponse createCircusShow(global::grpcProtoFiles.CreateCircusShowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createCircusShow, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.CreateCircusShowResponse> createCircusShowAsync(global::grpcProtoFiles.CreateCircusShowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createCircusShowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.CreateCircusShowResponse> createCircusShowAsync(global::grpcProtoFiles.CreateCircusShowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createCircusShow, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.CircusShowByIdResponse getCircusShowById(global::grpcProtoFiles.CircusShowByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getCircusShowById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.CircusShowByIdResponse getCircusShowById(global::grpcProtoFiles.CircusShowByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getCircusShowById, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.CircusShowByIdResponse> getCircusShowByIdAsync(global::grpcProtoFiles.CircusShowByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getCircusShowByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.CircusShowByIdResponse> getCircusShowByIdAsync(global::grpcProtoFiles.CircusShowByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getCircusShowById, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.GetAllCircusShowResponse getAllCircusShows(global::grpcProtoFiles.getAllCircusShowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllCircusShows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.GetAllCircusShowResponse getAllCircusShows(global::grpcProtoFiles.getAllCircusShowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getAllCircusShows, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.GetAllCircusShowResponse> getAllCircusShowsAsync(global::grpcProtoFiles.getAllCircusShowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllCircusShowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.GetAllCircusShowResponse> getAllCircusShowsAsync(global::grpcProtoFiles.getAllCircusShowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getAllCircusShows, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.getAllCircusShowsByLocationResponse getAllCircusShowsByLocation(global::grpcProtoFiles.getAllCircusShowsByLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllCircusShowsByLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.getAllCircusShowsByLocationResponse getAllCircusShowsByLocation(global::grpcProtoFiles.getAllCircusShowsByLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getAllCircusShowsByLocation, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.getAllCircusShowsByLocationResponse> getAllCircusShowsByLocationAsync(global::grpcProtoFiles.getAllCircusShowsByLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getAllCircusShowsByLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.getAllCircusShowsByLocationResponse> getAllCircusShowsByLocationAsync(global::grpcProtoFiles.getAllCircusShowsByLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getAllCircusShowsByLocation, null, options, request);
      }
      /// <summary>
      ///TODO
      ///rpc deleteCircusShow(CircusShowByIdRequest) returns (CreateCircusShowResponse);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.DeleteCircusShowResponse DeleteCircusShow(global::grpcProtoFiles.Integer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCircusShow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///TODO
      ///rpc deleteCircusShow(CircusShowByIdRequest) returns (CreateCircusShowResponse);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::grpcProtoFiles.DeleteCircusShowResponse DeleteCircusShow(global::grpcProtoFiles.Integer request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCircusShow, null, options, request);
      }
      /// <summary>
      ///TODO
      ///rpc deleteCircusShow(CircusShowByIdRequest) returns (CreateCircusShowResponse);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.DeleteCircusShowResponse> DeleteCircusShowAsync(global::grpcProtoFiles.Integer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCircusShowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///TODO
      ///rpc deleteCircusShow(CircusShowByIdRequest) returns (CreateCircusShowResponse);
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::grpcProtoFiles.DeleteCircusShowResponse> DeleteCircusShowAsync(global::grpcProtoFiles.Integer request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCircusShow, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CircusShowServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CircusShowServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CircusShowServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_createCircusShow, serviceImpl.createCircusShow)
          .AddMethod(__Method_getCircusShowById, serviceImpl.getCircusShowById)
          .AddMethod(__Method_getAllCircusShows, serviceImpl.getAllCircusShows)
          .AddMethod(__Method_getAllCircusShowsByLocation, serviceImpl.getAllCircusShowsByLocation)
          .AddMethod(__Method_DeleteCircusShow, serviceImpl.DeleteCircusShow).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CircusShowServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_createCircusShow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::grpcProtoFiles.CreateCircusShowRequest, global::grpcProtoFiles.CreateCircusShowResponse>(serviceImpl.createCircusShow));
      serviceBinder.AddMethod(__Method_getCircusShowById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::grpcProtoFiles.CircusShowByIdRequest, global::grpcProtoFiles.CircusShowByIdResponse>(serviceImpl.getCircusShowById));
      serviceBinder.AddMethod(__Method_getAllCircusShows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::grpcProtoFiles.getAllCircusShowsRequest, global::grpcProtoFiles.GetAllCircusShowResponse>(serviceImpl.getAllCircusShows));
      serviceBinder.AddMethod(__Method_getAllCircusShowsByLocation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::grpcProtoFiles.getAllCircusShowsByLocationRequest, global::grpcProtoFiles.getAllCircusShowsByLocationResponse>(serviceImpl.getAllCircusShowsByLocation));
      serviceBinder.AddMethod(__Method_DeleteCircusShow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::grpcProtoFiles.Integer, global::grpcProtoFiles.DeleteCircusShowResponse>(serviceImpl.DeleteCircusShow));
    }

  }
}
#endregion
