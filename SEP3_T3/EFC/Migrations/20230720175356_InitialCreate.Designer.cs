// <auto-generated />
using EFC;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFC.Migrations
{
    [DbContext(typeof(DatabaseAccess))]
    [Migration("20230720175356_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("EFC.Entities.LocationEntity", b =>
                {
                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationName");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EFC.Entities.ReservationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReservedByUsername")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ShowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("noOfTickets")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReservedByUsername");

                    b.HasIndex("ShowId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("EFC.Entities.ShowEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("endTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("startTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("totalTicketsAvailable")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("EFC.Entities.ShowLocationEntity", b =>
                {
                    b.Property<int>("ShowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocationName")
                        .HasColumnType("TEXT");

                    b.HasKey("ShowId", "LocationName");

                    b.HasIndex("LocationName");

                    b.ToTable("ShowLocationEntity");
                });

            modelBuilder.Entity("EFC.Entities.UserEntity", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EFC.Entities.ReservationEntity", b =>
                {
                    b.HasOne("EFC.Entities.UserEntity", "ReservedBy")
                        .WithMany()
                        .HasForeignKey("ReservedByUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFC.Entities.ShowEntity", "Show")
                        .WithMany()
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReservedBy");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("EFC.Entities.ShowLocationEntity", b =>
                {
                    b.HasOne("EFC.Entities.LocationEntity", "Location")
                        .WithMany("ShowLocations")
                        .HasForeignKey("LocationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFC.Entities.ShowEntity", "Show")
                        .WithMany("ShowLocations")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("EFC.Entities.LocationEntity", b =>
                {
                    b.Navigation("ShowLocations");
                });

            modelBuilder.Entity("EFC.Entities.ShowEntity", b =>
                {
                    b.Navigation("ShowLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
